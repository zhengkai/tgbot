// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: message.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message representing a request to send a message.
type SendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the business connection on behalf of which the message will be sent
	BusinessConnectionId string `protobuf:"bytes,1,opt,name=business_connection_id,json=businessConnectionId,proto3" json:"business_connection_id,omitempty"`
	// Unique identifier for the target chat or username of the target channel (in the format @channelusername)
	ChatId string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
	MessageThreadId uint64 `protobuf:"varint,3,opt,name=message_thread_id,json=messageThreadId,proto3" json:"message_thread_id,omitempty"`
	// Text of the message to be sent, 1-4096 characters after entities parsing
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Mode for parsing entities in the message text. See formatting options for more details
	ParseMode string `protobuf:"bytes,5,opt,name=parse_mode,json=parseMode,proto3" json:"parse_mode,omitempty"`
	// A list of special entities that appear in message text, which can be specified instead of parse_mode
	Entities []*MessageEntity `protobuf:"bytes,6,rep,name=entities,proto3" json:"entities,omitempty"`
	// Link preview generation options for the message
	LinkPreviewOptions *LinkPreviewOptions `protobuf:"bytes,7,opt,name=link_preview_options,json=linkPreviewOptions,proto3" json:"link_preview_options,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound
	DisableNotification bool `protobuf:"varint,8,opt,name=disable_notification,json=disableNotification,proto3" json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving
	ProtectContent bool `protobuf:"varint,9,opt,name=protect_content,json=protectContent,proto3" json:"protect_content,omitempty"`
	// Unique identifier of the message effect to be added to the message; for private chats only
	MessageEffectId string `protobuf:"bytes,10,opt,name=message_effect_id,json=messageEffectId,proto3" json:"message_effect_id,omitempty"`
	// Description of the message to reply to
	ReplyParameters *ReplyParameters `protobuf:"bytes,11,opt,name=reply_parameters,json=replyParameters,proto3" json:"reply_parameters,omitempty"`
	// Additional interface options. A serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user
	ReplyMarkup *ReplyMarkup `protobuf:"bytes,12,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (x *SendMessage) Reset() {
	*x = SendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessage) ProtoMessage() {}

func (x *SendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessage.ProtoReflect.Descriptor instead.
func (*SendMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *SendMessage) GetBusinessConnectionId() string {
	if x != nil {
		return x.BusinessConnectionId
	}
	return ""
}

func (x *SendMessage) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *SendMessage) GetMessageThreadId() uint64 {
	if x != nil {
		return x.MessageThreadId
	}
	return 0
}

func (x *SendMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendMessage) GetParseMode() string {
	if x != nil {
		return x.ParseMode
	}
	return ""
}

func (x *SendMessage) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *SendMessage) GetLinkPreviewOptions() *LinkPreviewOptions {
	if x != nil {
		return x.LinkPreviewOptions
	}
	return nil
}

func (x *SendMessage) GetDisableNotification() bool {
	if x != nil {
		return x.DisableNotification
	}
	return false
}

func (x *SendMessage) GetProtectContent() bool {
	if x != nil {
		return x.ProtectContent
	}
	return false
}

func (x *SendMessage) GetMessageEffectId() string {
	if x != nil {
		return x.MessageEffectId
	}
	return ""
}

func (x *SendMessage) GetReplyParameters() *ReplyParameters {
	if x != nil {
		return x.ReplyParameters
	}
	return nil
}

func (x *SendMessage) GetReplyMarkup() *ReplyMarkup {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

type SendChatAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessConnectionId string `protobuf:"bytes,1,opt,name=business_connection_id,json=businessConnectionId,proto3" json:"business_connection_id,omitempty"`
	ChatId               string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MessageThreadId      uint64 `protobuf:"varint,3,opt,name=message_thread_id,json=messageThreadId,proto3" json:"message_thread_id,omitempty"`
	Action               string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *SendChatAction) Reset() {
	*x = SendChatAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatAction) ProtoMessage() {}

func (x *SendChatAction) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatAction.ProtoReflect.Descriptor instead.
func (*SendChatAction) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *SendChatAction) GetBusinessConnectionId() string {
	if x != nil {
		return x.BusinessConnectionId
	}
	return ""
}

func (x *SendChatAction) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *SendChatAction) GetMessageThreadId() uint64 {
	if x != nil {
		return x.MessageThreadId
	}
	return 0
}

func (x *SendChatAction) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Define messages for InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, and ForceReply as required.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId                     uint64                         `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`                                                                   // Unique message identifier inside this chat
	MessageThreadId               uint64                         `protobuf:"varint,2,opt,name=message_thread_id,json=messageThreadId,proto3" json:"message_thread_id,omitempty"`                                               // Optional. Unique identifier of a message thread to which the message belongs; for supergroups only
	From                          *User                          `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`                                                                                               // Optional. Sender of the message; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats
	SenderChat                    *Chat                          `protobuf:"bytes,4,opt,name=sender_chat,json=senderChat,proto3" json:"sender_chat,omitempty"`                                                                 // Optional. Sender of the message when sent on behalf of a chat. For example, the supergroup itself for messages sent by its anonymous administrators or a linked channel for messages automatically forwarded to the channel's discussion group. For backward compatibility, if the message was sent on behalf of a chat, the field from contains a fake sender user in non-channel chats.
	SenderBoostCount              uint64                         `protobuf:"varint,5,opt,name=sender_boost_count,json=senderBoostCount,proto3" json:"sender_boost_count,omitempty"`                                            // Optional. If the sender of the message boosted the chat, the number of boosts added by the user
	SenderBusinessBot             *User                          `protobuf:"bytes,6,opt,name=sender_business_bot,json=senderBusinessBot,proto3" json:"sender_business_bot,omitempty"`                                          // Optional. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account.
	Date                          uint32                         `protobuf:"fixed32,7,opt,name=date,proto3" json:"date,omitempty"`                                                                                             // Date the message was sent in Unix time. It is always a positive number, representing a valid date.
	BusinessConnectionId          string                         `protobuf:"bytes,8,opt,name=business_connection_id,json=businessConnectionId,proto3" json:"business_connection_id,omitempty"`                                 // Optional. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier.
	Chat                          *Chat                          `protobuf:"bytes,9,opt,name=chat,proto3" json:"chat,omitempty"`                                                                                               // Chat the message belongs to
	ForwardOrigin                 *MessageOrigin                 `protobuf:"bytes,10,opt,name=forward_origin,json=forwardOrigin,proto3" json:"forward_origin,omitempty"`                                                       // Optional. Information about the original message for forwarded messages
	IsTopicMessage                bool                           `protobuf:"varint,11,opt,name=is_topic_message,json=isTopicMessage,proto3" json:"is_topic_message,omitempty"`                                                 // Optional. True, if the message is sent to a forum topic
	IsAutomaticForward            bool                           `protobuf:"varint,12,opt,name=is_automatic_forward,json=isAutomaticForward,proto3" json:"is_automatic_forward,omitempty"`                                     // Optional. True, if the message is a channel post that was automatically forwarded to the connected discussion group
	ReplyToMessage                *Message                       `protobuf:"bytes,13,opt,name=reply_to_message,json=replyToMessage,proto3" json:"reply_to_message,omitempty"`                                                  // Optional. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
	ExternalReply                 *ExternalReplyInfo             `protobuf:"bytes,14,opt,name=external_reply,json=externalReply,proto3" json:"external_reply,omitempty"`                                                       // Optional. Information about the message that is being replied to, which may come from another chat or forum topic
	Quote                         *TextQuote                     `protobuf:"bytes,15,opt,name=quote,proto3" json:"quote,omitempty"`                                                                                            // Optional. For replies that quote part of the original message, the quoted part of the message
	ReplyToStory                  *Story                         `protobuf:"bytes,16,opt,name=reply_to_story,json=replyToStory,proto3" json:"reply_to_story,omitempty"`                                                        // Optional. For replies to a story, the original story
	ViaBot                        *User                          `protobuf:"bytes,17,opt,name=via_bot,json=viaBot,proto3" json:"via_bot,omitempty"`                                                                            // Optional. Bot through which the message was sent
	EditDate                      uint32                         `protobuf:"fixed32,18,opt,name=edit_date,json=editDate,proto3" json:"edit_date,omitempty"`                                                                    // Optional. Date the message was last edited in Unix time
	HasProtectedContent           bool                           `protobuf:"varint,19,opt,name=has_protected_content,json=hasProtectedContent,proto3" json:"has_protected_content,omitempty"`                                  // Optional. True, if the message can't be forwarded
	IsFromOffline                 bool                           `protobuf:"varint,20,opt,name=is_from_offline,json=isFromOffline,proto3" json:"is_from_offline,omitempty"`                                                    // Optional. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message
	MediaGroupId                  string                         `protobuf:"bytes,21,opt,name=media_group_id,json=mediaGroupId,proto3" json:"media_group_id,omitempty"`                                                        // Optional. The unique identifier of a media message group this message belongs to
	AuthorSignature               string                         `protobuf:"bytes,22,opt,name=author_signature,json=authorSignature,proto3" json:"author_signature,omitempty"`                                                 // Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
	Text                          string                         `protobuf:"bytes,23,opt,name=text,proto3" json:"text,omitempty"`                                                                                              // Optional. For text messages, the actual UTF-8 text of the message
	Entities                      []*MessageEntity               `protobuf:"bytes,24,rep,name=entities,proto3" json:"entities,omitempty"`                                                                                      // Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
	LinkPreviewOptions            *LinkPreviewOptions            `protobuf:"bytes,25,opt,name=link_preview_options,json=linkPreviewOptions,proto3" json:"link_preview_options,omitempty"`                                      // Optional. Options used for link preview generation for the message, if it is a text message and link preview options were changed
	EffectId                      string                         `protobuf:"bytes,26,opt,name=effect_id,json=effectId,proto3" json:"effect_id,omitempty"`                                                                      // Optional. Unique identifier of the message effect added to the message
	Animation                     *Animation                     `protobuf:"bytes,27,opt,name=animation,proto3" json:"animation,omitempty"`                                                                                    // Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set
	Audio                         *Audio                         `protobuf:"bytes,28,opt,name=audio,proto3" json:"audio,omitempty"`                                                                                            // Optional. Message is an audio file, information about the file
	Document                      *Document                      `protobuf:"bytes,29,opt,name=document,proto3" json:"document,omitempty"`                                                                                      // Optional. Message is a general file, information about the file
	PaidMedia                     *PaidMediaInfo                 `protobuf:"bytes,30,opt,name=paid_media,json=paidMedia,proto3" json:"paid_media,omitempty"`                                                                   // Optional. Message contains paid media; information about the paid media
	Photo                         []*PhotoSize                   `protobuf:"bytes,31,rep,name=photo,proto3" json:"photo,omitempty"`                                                                                            // Optional. Message is a photo, available sizes of the photo
	Sticker                       *Sticker                       `protobuf:"bytes,32,opt,name=sticker,proto3" json:"sticker,omitempty"`                                                                                        // Optional. Message is a sticker, information about the sticker
	Story                         *Story                         `protobuf:"bytes,33,opt,name=story,proto3" json:"story,omitempty"`                                                                                            // Optional. Message is a forwarded story
	Video                         *Video                         `protobuf:"bytes,34,opt,name=video,proto3" json:"video,omitempty"`                                                                                            // Optional. Message is a video, information about the video
	VideoNote                     *VideoNote                     `protobuf:"bytes,35,opt,name=video_note,json=videoNote,proto3" json:"video_note,omitempty"`                                                                   // Optional. Message is a video note, information about the video message
	Voice                         *Voice                         `protobuf:"bytes,36,opt,name=voice,proto3" json:"voice,omitempty"`                                                                                            // Optional. Message is a voice message, information about the file
	Caption                       string                         `protobuf:"bytes,37,opt,name=caption,proto3" json:"caption,omitempty"`                                                                                        // Optional. Caption for the animation, audio, document, paid media, photo, video or voice
	CaptionEntities               []*MessageEntity               `protobuf:"bytes,38,rep,name=caption_entities,json=captionEntities,proto3" json:"caption_entities,omitempty"`                                                 // Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
	ShowCaptionAboveMedia         bool                           `protobuf:"varint,39,opt,name=show_caption_above_media,json=showCaptionAboveMedia,proto3" json:"show_caption_above_media,omitempty"`                          // Optional. True, if the caption must be shown above the message media
	HasMediaSpoiler               bool                           `protobuf:"varint,40,opt,name=has_media_spoiler,json=hasMediaSpoiler,proto3" json:"has_media_spoiler,omitempty"`                                              // Optional. True, if the message media is covered by a spoiler animation
	Contact                       *Contact                       `protobuf:"bytes,41,opt,name=contact,proto3" json:"contact,omitempty"`                                                                                        // Optional. Message is a shared contact, information about the contact
	Dice                          *Dice                          `protobuf:"bytes,42,opt,name=dice,proto3" json:"dice,omitempty"`                                                                                              // Optional. Message is a dice with random value
	Game                          *Game                          `protobuf:"bytes,43,opt,name=game,proto3" json:"game,omitempty"`                                                                                              // Optional. Message is a game, information about the game. More about games »
	Poll                          *Poll                          `protobuf:"bytes,44,opt,name=poll,proto3" json:"poll,omitempty"`                                                                                              // Optional. Message is a native poll, information about the poll
	Venue                         *Venue                         `protobuf:"bytes,45,opt,name=venue,proto3" json:"venue,omitempty"`                                                                                            // Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set
	Location                      *Location                      `protobuf:"bytes,46,opt,name=location,proto3" json:"location,omitempty"`                                                                                      // Optional. Message is a shared location, information about the location
	NewChatMembers                []*User                        `protobuf:"bytes,47,rep,name=new_chat_members,json=newChatMembers,proto3" json:"new_chat_members,omitempty"`                                                  // Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
	LeftChatMember                *User                          `protobuf:"bytes,48,opt,name=left_chat_member,json=leftChatMember,proto3" json:"left_chat_member,omitempty"`                                                  // Optional. A member was removed from the group, information about them (this member may be the bot itself)
	NewChatTitle                  string                         `protobuf:"bytes,49,opt,name=new_chat_title,json=newChatTitle,proto3" json:"new_chat_title,omitempty"`                                                        // Optional. A chat title was changed to this value
	NewChatPhoto                  []*PhotoSize                   `protobuf:"bytes,50,rep,name=new_chat_photo,json=newChatPhoto,proto3" json:"new_chat_photo,omitempty"`                                                        // Optional. A chat photo was change to this value
	DeleteChatPhoto               bool                           `protobuf:"varint,51,opt,name=delete_chat_photo,json=deleteChatPhoto,proto3" json:"delete_chat_photo,omitempty"`                                              // Optional. Service message: the chat photo was deleted
	GroupChatCreated              bool                           `protobuf:"varint,52,opt,name=group_chat_created,json=groupChatCreated,proto3" json:"group_chat_created,omitempty"`                                           // Optional. Service message: the group has been created
	SupergroupChatCreated         bool                           `protobuf:"varint,53,opt,name=supergroup_chat_created,json=supergroupChatCreated,proto3" json:"supergroup_chat_created,omitempty"`                            // Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.
	ChannelChatCreated            bool                           `protobuf:"varint,54,opt,name=channel_chat_created,json=channelChatCreated,proto3" json:"channel_chat_created,omitempty"`                                     // Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.
	MessageAutoDeleteTimerChanged *MessageAutoDeleteTimerChanged `protobuf:"bytes,55,opt,name=message_auto_delete_timer_changed,json=messageAutoDeleteTimerChanged,proto3" json:"message_auto_delete_timer_changed,omitempty"` // Optional. Service message: auto-delete timer settings changed in the chat
	MigrateToChatId               uint64                         `protobuf:"varint,56,opt,name=migrate_to_chat_id,json=migrateToChatId,proto3" json:"migrate_to_chat_id,omitempty"`                                            // Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
	MigrateFromChatId             uint64                         `protobuf:"varint,57,opt,name=migrate_from_chat_id,json=migrateFromChatId,proto3" json:"migrate_from_chat_id,omitempty"`                                      // Optional. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
	PinnedMessage                 *Message                       `protobuf:"bytes,58,opt,name=pinned_message,json=pinnedMessage,proto3" json:"pinned_message,omitempty"`                                                       // Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
	Invoice                       *Invoice                       `protobuf:"bytes,59,opt,name=invoice,proto3" json:"invoice,omitempty"`                                                                                        // Optional. Message is an invoice for a payment, information about the invoice. More about payments »
	SuccessfulPayment             *SuccessfulPayment             `protobuf:"bytes,60,opt,name=successful_payment,json=successfulPayment,proto3" json:"successful_payment,omitempty"`                                           // Optional. Message is a service message about a successful payment, information about the payment. More about payments »
	RefundedPayment               *RefundedPayment               `protobuf:"bytes,61,opt,name=refunded_payment,json=refundedPayment,proto3" json:"refunded_payment,omitempty"`                                                 // Optional. Message is a service message about a refunded payment, information about the payment. More about payments »
	UsersShared                   *UsersShared                   `protobuf:"bytes,62,opt,name=users_shared,json=usersShared,proto3" json:"users_shared,omitempty"`                                                             // Optional. Service message: users were shared with the bot
	ChatShared                    *ChatShared                    `protobuf:"bytes,63,opt,name=chat_shared,json=chatShared,proto3" json:"chat_shared,omitempty"`                                                                // Optional. Service message: a chat was shared with the bot
	ConnectedWebsite              string                         `protobuf:"bytes,64,opt,name=connected_website,json=connectedWebsite,proto3" json:"connected_website,omitempty"`                                              // Optional. The domain name of the website on which the user has logged in. More about Telegram Login »
	WriteAccessAllowed            *WriteAccessAllowed            `protobuf:"bytes,65,opt,name=write_access_allowed,json=writeAccessAllowed,proto3" json:"write_access_allowed,omitempty"`                                      // Optional. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess
	PassportData                  *PassportData                  `protobuf:"bytes,66,opt,name=passport_data,json=passportData,proto3" json:"passport_data,omitempty"`                                                          // Optional. Telegram Passport data
	ProximityAlertTriggered       *ProximityAlertTriggered       `protobuf:"bytes,67,opt,name=proximity_alert_triggered,json=proximityAlertTriggered,proto3" json:"proximity_alert_triggered,omitempty"`                       // Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location.
	BoostAdded                    *ChatBoostAdded                `protobuf:"bytes,68,opt,name=boost_added,json=boostAdded,proto3" json:"boost_added,omitempty"`                                                                // Optional. Service message: user boosted the chat
	ChatBackgroundSet             *ChatBackground                `protobuf:"bytes,69,opt,name=chat_background_set,json=chatBackgroundSet,proto3" json:"chat_background_set,omitempty"`                                         // Optional. Service message: chat background set
	ForumTopicCreated             *ForumTopicCreated             `protobuf:"bytes,70,opt,name=forum_topic_created,json=forumTopicCreated,proto3" json:"forum_topic_created,omitempty"`                                         // Optional. Service message: forum topic created
	ForumTopicEdited              *ForumTopicEdited              `protobuf:"bytes,71,opt,name=forum_topic_edited,json=forumTopicEdited,proto3" json:"forum_topic_edited,omitempty"`                                            // Optional. Service message: forum topic edited
	ForumTopicClosed              *ForumTopicClosed              `protobuf:"bytes,72,opt,name=forum_topic_closed,json=forumTopicClosed,proto3" json:"forum_topic_closed,omitempty"`                                            // Optional. Service message: forum topic closed
	ForumTopicReopened            *ForumTopicReopened            `protobuf:"bytes,73,opt,name=forum_topic_reopened,json=forumTopicReopened,proto3" json:"forum_topic_reopened,omitempty"`                                      // Optional. Service message: forum topic reopened
	GeneralForumTopicHidden       *GeneralForumTopicHidden       `protobuf:"bytes,74,opt,name=general_forum_topic_hidden,json=generalForumTopicHidden,proto3" json:"general_forum_topic_hidden,omitempty"`                     // Optional. Service message: the 'General' forum topic hidden
	GeneralForumTopicUnhidden     *GeneralForumTopicUnhidden     `protobuf:"bytes,75,opt,name=general_forum_topic_unhidden,json=generalForumTopicUnhidden,proto3" json:"general_forum_topic_unhidden,omitempty"`               // Optional. Service message: the 'General' forum topic unhidden
	GiveawayCreated               *GiveawayCreated               `protobuf:"bytes,76,opt,name=giveaway_created,json=giveawayCreated,proto3" json:"giveaway_created,omitempty"`                                                 // Optional. Service message: a scheduled giveaway was created
	Giveaway                      *Giveaway                      `protobuf:"bytes,77,opt,name=giveaway,proto3" json:"giveaway,omitempty"`                                                                                      // Optional. The message is a scheduled giveaway message
	GiveawayWinners               *GiveawayWinners               `protobuf:"bytes,78,opt,name=giveaway_winners,json=giveawayWinners,proto3" json:"giveaway_winners,omitempty"`                                                 // Optional. A giveaway with public winners was completed
	GiveawayCompleted             *GiveawayCompleted             `protobuf:"bytes,79,opt,name=giveaway_completed,json=giveawayCompleted,proto3" json:"giveaway_completed,omitempty"`                                           // Optional. Service message: a giveaway without public winners was completed
	VideoChatScheduled            *VideoChatScheduled            `protobuf:"bytes,80,opt,name=video_chat_scheduled,json=videoChatScheduled,proto3" json:"video_chat_scheduled,omitempty"`                                      // Optional. Service message: video chat scheduled
	VideoChatStarted              *VideoChatStarted              `protobuf:"bytes,81,opt,name=video_chat_started,json=videoChatStarted,proto3" json:"video_chat_started,omitempty"`                                            // Optional. Service message: video chat started
	VideoChatEnded                *VideoChatEnded                `protobuf:"bytes,82,opt,name=video_chat_ended,json=videoChatEnded,proto3" json:"video_chat_ended,omitempty"`                                                  // Optional. Service message: video chat ended
	VideoChatParticipantsInvited  *VideoChatParticipantsInvited  `protobuf:"bytes,83,opt,name=video_chat_participants_invited,json=videoChatParticipantsInvited,proto3" json:"video_chat_participants_invited,omitempty"`      // Optional. Service message: new participants invited to a video chat
	WebAppData                    *WebAppData                    `protobuf:"bytes,84,opt,name=web_app_data,json=webAppData,proto3" json:"web_app_data,omitempty"`                                                              // Optional. Service message: data sent by a Web App
	ReplyMarkup                   *InlineKeyboardMarkup          `protobuf:"bytes,85,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`                                                             // Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *Message) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Message) GetMessageThreadId() uint64 {
	if x != nil {
		return x.MessageThreadId
	}
	return 0
}

func (x *Message) GetFrom() *User {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Message) GetSenderChat() *Chat {
	if x != nil {
		return x.SenderChat
	}
	return nil
}

func (x *Message) GetSenderBoostCount() uint64 {
	if x != nil {
		return x.SenderBoostCount
	}
	return 0
}

func (x *Message) GetSenderBusinessBot() *User {
	if x != nil {
		return x.SenderBusinessBot
	}
	return nil
}

func (x *Message) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *Message) GetBusinessConnectionId() string {
	if x != nil {
		return x.BusinessConnectionId
	}
	return ""
}

func (x *Message) GetChat() *Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *Message) GetForwardOrigin() *MessageOrigin {
	if x != nil {
		return x.ForwardOrigin
	}
	return nil
}

func (x *Message) GetIsTopicMessage() bool {
	if x != nil {
		return x.IsTopicMessage
	}
	return false
}

func (x *Message) GetIsAutomaticForward() bool {
	if x != nil {
		return x.IsAutomaticForward
	}
	return false
}

func (x *Message) GetReplyToMessage() *Message {
	if x != nil {
		return x.ReplyToMessage
	}
	return nil
}

func (x *Message) GetExternalReply() *ExternalReplyInfo {
	if x != nil {
		return x.ExternalReply
	}
	return nil
}

func (x *Message) GetQuote() *TextQuote {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *Message) GetReplyToStory() *Story {
	if x != nil {
		return x.ReplyToStory
	}
	return nil
}

func (x *Message) GetViaBot() *User {
	if x != nil {
		return x.ViaBot
	}
	return nil
}

func (x *Message) GetEditDate() uint32 {
	if x != nil {
		return x.EditDate
	}
	return 0
}

func (x *Message) GetHasProtectedContent() bool {
	if x != nil {
		return x.HasProtectedContent
	}
	return false
}

func (x *Message) GetIsFromOffline() bool {
	if x != nil {
		return x.IsFromOffline
	}
	return false
}

func (x *Message) GetMediaGroupId() string {
	if x != nil {
		return x.MediaGroupId
	}
	return ""
}

func (x *Message) GetAuthorSignature() string {
	if x != nil {
		return x.AuthorSignature
	}
	return ""
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Message) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *Message) GetLinkPreviewOptions() *LinkPreviewOptions {
	if x != nil {
		return x.LinkPreviewOptions
	}
	return nil
}

func (x *Message) GetEffectId() string {
	if x != nil {
		return x.EffectId
	}
	return ""
}

func (x *Message) GetAnimation() *Animation {
	if x != nil {
		return x.Animation
	}
	return nil
}

func (x *Message) GetAudio() *Audio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *Message) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *Message) GetPaidMedia() *PaidMediaInfo {
	if x != nil {
		return x.PaidMedia
	}
	return nil
}

func (x *Message) GetPhoto() []*PhotoSize {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *Message) GetSticker() *Sticker {
	if x != nil {
		return x.Sticker
	}
	return nil
}

func (x *Message) GetStory() *Story {
	if x != nil {
		return x.Story
	}
	return nil
}

func (x *Message) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *Message) GetVideoNote() *VideoNote {
	if x != nil {
		return x.VideoNote
	}
	return nil
}

func (x *Message) GetVoice() *Voice {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *Message) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *Message) GetCaptionEntities() []*MessageEntity {
	if x != nil {
		return x.CaptionEntities
	}
	return nil
}

func (x *Message) GetShowCaptionAboveMedia() bool {
	if x != nil {
		return x.ShowCaptionAboveMedia
	}
	return false
}

func (x *Message) GetHasMediaSpoiler() bool {
	if x != nil {
		return x.HasMediaSpoiler
	}
	return false
}

func (x *Message) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Message) GetDice() *Dice {
	if x != nil {
		return x.Dice
	}
	return nil
}

func (x *Message) GetGame() *Game {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *Message) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *Message) GetVenue() *Venue {
	if x != nil {
		return x.Venue
	}
	return nil
}

func (x *Message) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Message) GetNewChatMembers() []*User {
	if x != nil {
		return x.NewChatMembers
	}
	return nil
}

func (x *Message) GetLeftChatMember() *User {
	if x != nil {
		return x.LeftChatMember
	}
	return nil
}

func (x *Message) GetNewChatTitle() string {
	if x != nil {
		return x.NewChatTitle
	}
	return ""
}

func (x *Message) GetNewChatPhoto() []*PhotoSize {
	if x != nil {
		return x.NewChatPhoto
	}
	return nil
}

func (x *Message) GetDeleteChatPhoto() bool {
	if x != nil {
		return x.DeleteChatPhoto
	}
	return false
}

func (x *Message) GetGroupChatCreated() bool {
	if x != nil {
		return x.GroupChatCreated
	}
	return false
}

func (x *Message) GetSupergroupChatCreated() bool {
	if x != nil {
		return x.SupergroupChatCreated
	}
	return false
}

func (x *Message) GetChannelChatCreated() bool {
	if x != nil {
		return x.ChannelChatCreated
	}
	return false
}

func (x *Message) GetMessageAutoDeleteTimerChanged() *MessageAutoDeleteTimerChanged {
	if x != nil {
		return x.MessageAutoDeleteTimerChanged
	}
	return nil
}

func (x *Message) GetMigrateToChatId() uint64 {
	if x != nil {
		return x.MigrateToChatId
	}
	return 0
}

func (x *Message) GetMigrateFromChatId() uint64 {
	if x != nil {
		return x.MigrateFromChatId
	}
	return 0
}

func (x *Message) GetPinnedMessage() *Message {
	if x != nil {
		return x.PinnedMessage
	}
	return nil
}

func (x *Message) GetInvoice() *Invoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

func (x *Message) GetSuccessfulPayment() *SuccessfulPayment {
	if x != nil {
		return x.SuccessfulPayment
	}
	return nil
}

func (x *Message) GetRefundedPayment() *RefundedPayment {
	if x != nil {
		return x.RefundedPayment
	}
	return nil
}

func (x *Message) GetUsersShared() *UsersShared {
	if x != nil {
		return x.UsersShared
	}
	return nil
}

func (x *Message) GetChatShared() *ChatShared {
	if x != nil {
		return x.ChatShared
	}
	return nil
}

func (x *Message) GetConnectedWebsite() string {
	if x != nil {
		return x.ConnectedWebsite
	}
	return ""
}

func (x *Message) GetWriteAccessAllowed() *WriteAccessAllowed {
	if x != nil {
		return x.WriteAccessAllowed
	}
	return nil
}

func (x *Message) GetPassportData() *PassportData {
	if x != nil {
		return x.PassportData
	}
	return nil
}

func (x *Message) GetProximityAlertTriggered() *ProximityAlertTriggered {
	if x != nil {
		return x.ProximityAlertTriggered
	}
	return nil
}

func (x *Message) GetBoostAdded() *ChatBoostAdded {
	if x != nil {
		return x.BoostAdded
	}
	return nil
}

func (x *Message) GetChatBackgroundSet() *ChatBackground {
	if x != nil {
		return x.ChatBackgroundSet
	}
	return nil
}

func (x *Message) GetForumTopicCreated() *ForumTopicCreated {
	if x != nil {
		return x.ForumTopicCreated
	}
	return nil
}

func (x *Message) GetForumTopicEdited() *ForumTopicEdited {
	if x != nil {
		return x.ForumTopicEdited
	}
	return nil
}

func (x *Message) GetForumTopicClosed() *ForumTopicClosed {
	if x != nil {
		return x.ForumTopicClosed
	}
	return nil
}

func (x *Message) GetForumTopicReopened() *ForumTopicReopened {
	if x != nil {
		return x.ForumTopicReopened
	}
	return nil
}

func (x *Message) GetGeneralForumTopicHidden() *GeneralForumTopicHidden {
	if x != nil {
		return x.GeneralForumTopicHidden
	}
	return nil
}

func (x *Message) GetGeneralForumTopicUnhidden() *GeneralForumTopicUnhidden {
	if x != nil {
		return x.GeneralForumTopicUnhidden
	}
	return nil
}

func (x *Message) GetGiveawayCreated() *GiveawayCreated {
	if x != nil {
		return x.GiveawayCreated
	}
	return nil
}

func (x *Message) GetGiveaway() *Giveaway {
	if x != nil {
		return x.Giveaway
	}
	return nil
}

func (x *Message) GetGiveawayWinners() *GiveawayWinners {
	if x != nil {
		return x.GiveawayWinners
	}
	return nil
}

func (x *Message) GetGiveawayCompleted() *GiveawayCompleted {
	if x != nil {
		return x.GiveawayCompleted
	}
	return nil
}

func (x *Message) GetVideoChatScheduled() *VideoChatScheduled {
	if x != nil {
		return x.VideoChatScheduled
	}
	return nil
}

func (x *Message) GetVideoChatStarted() *VideoChatStarted {
	if x != nil {
		return x.VideoChatStarted
	}
	return nil
}

func (x *Message) GetVideoChatEnded() *VideoChatEnded {
	if x != nil {
		return x.VideoChatEnded
	}
	return nil
}

func (x *Message) GetVideoChatParticipantsInvited() *VideoChatParticipantsInvited {
	if x != nil {
		return x.VideoChatParticipantsInvited
	}
	return nil
}

func (x *Message) GetWebAppData() *WebAppData {
	if x != nil {
		return x.WebAppData
	}
	return nil
}

func (x *Message) GetReplyMarkup() *InlineKeyboardMarkup {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x0a, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x04, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x73, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x21,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x29, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x13, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x38, 0x0a,
	0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21,
	0x0a, 0x07, 0x76, 0x69, 0x61, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x76, 0x69, 0x61, 0x42, 0x6f,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68,
	0x61, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x2d, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x48,
	0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x0a, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x69, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x23, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x52, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x05,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x2c, 0x0a,
	0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2a, 0x0a,
	0x11, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x73, 0x70, 0x6f, 0x69, 0x6c,
	0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x53, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x1c, 0x0a, 0x04, 0x64, 0x69, 0x63, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x63, 0x65, 0x52, 0x04, 0x64, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04,
	0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x65, 0x6e, 0x75, 0x65, 0x52, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x10, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x6c,
	0x65, 0x66, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x43,
	0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x75, 0x70, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x68, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x21,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x1d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x70, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x52, 0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x19, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x52, 0x17, 0x70, 0x72, 0x6f,
	0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x52, 0x0a, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x13, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x11, 0x63, 0x68, 0x61, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x12, 0x45, 0x0a,
	0x13, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x14,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x6f, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e,
	0x65, 0x64, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65,
	0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x12, 0x5e, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x55, 0x6e, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x19, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f,
	0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x55, 0x6e, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x12, 0x3e, 0x0a, 0x10, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x0f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x08, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79,
	0x52, 0x08, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x10, 0x67, 0x69,
	0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77,
	0x61, 0x79, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x67, 0x69, 0x76, 0x65, 0x61,
	0x77, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x12, 0x67, 0x69,
	0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x69, 0x76, 0x65,
	0x61, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x11, 0x67,
	0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x48, 0x0a, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x12, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x10, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x0e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x1f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x52, 0x1c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x77, 0x65, 0x62,
	0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x42, 0x05, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_message_proto_goTypes = []any{
	(*SendMessage)(nil),                   // 0: pb.SendMessage
	(*SendChatAction)(nil),                // 1: pb.SendChatAction
	(*Message)(nil),                       // 2: pb.Message
	(*MessageEntity)(nil),                 // 3: pb.MessageEntity
	(*LinkPreviewOptions)(nil),            // 4: pb.LinkPreviewOptions
	(*ReplyParameters)(nil),               // 5: pb.ReplyParameters
	(*ReplyMarkup)(nil),                   // 6: pb.ReplyMarkup
	(*User)(nil),                          // 7: pb.User
	(*Chat)(nil),                          // 8: pb.Chat
	(*MessageOrigin)(nil),                 // 9: pb.MessageOrigin
	(*ExternalReplyInfo)(nil),             // 10: pb.ExternalReplyInfo
	(*TextQuote)(nil),                     // 11: pb.TextQuote
	(*Story)(nil),                         // 12: pb.Story
	(*Animation)(nil),                     // 13: pb.Animation
	(*Audio)(nil),                         // 14: pb.Audio
	(*Document)(nil),                      // 15: pb.Document
	(*PaidMediaInfo)(nil),                 // 16: pb.PaidMediaInfo
	(*PhotoSize)(nil),                     // 17: pb.PhotoSize
	(*Sticker)(nil),                       // 18: pb.Sticker
	(*Video)(nil),                         // 19: pb.Video
	(*VideoNote)(nil),                     // 20: pb.VideoNote
	(*Voice)(nil),                         // 21: pb.Voice
	(*Contact)(nil),                       // 22: pb.Contact
	(*Dice)(nil),                          // 23: pb.Dice
	(*Game)(nil),                          // 24: pb.Game
	(*Poll)(nil),                          // 25: pb.Poll
	(*Venue)(nil),                         // 26: pb.Venue
	(*Location)(nil),                      // 27: pb.Location
	(*MessageAutoDeleteTimerChanged)(nil), // 28: pb.MessageAutoDeleteTimerChanged
	(*Invoice)(nil),                       // 29: pb.Invoice
	(*SuccessfulPayment)(nil),             // 30: pb.SuccessfulPayment
	(*RefundedPayment)(nil),               // 31: pb.RefundedPayment
	(*UsersShared)(nil),                   // 32: pb.UsersShared
	(*ChatShared)(nil),                    // 33: pb.ChatShared
	(*WriteAccessAllowed)(nil),            // 34: pb.WriteAccessAllowed
	(*PassportData)(nil),                  // 35: pb.PassportData
	(*ProximityAlertTriggered)(nil),       // 36: pb.ProximityAlertTriggered
	(*ChatBoostAdded)(nil),                // 37: pb.ChatBoostAdded
	(*ChatBackground)(nil),                // 38: pb.ChatBackground
	(*ForumTopicCreated)(nil),             // 39: pb.ForumTopicCreated
	(*ForumTopicEdited)(nil),              // 40: pb.ForumTopicEdited
	(*ForumTopicClosed)(nil),              // 41: pb.ForumTopicClosed
	(*ForumTopicReopened)(nil),            // 42: pb.ForumTopicReopened
	(*GeneralForumTopicHidden)(nil),       // 43: pb.GeneralForumTopicHidden
	(*GeneralForumTopicUnhidden)(nil),     // 44: pb.GeneralForumTopicUnhidden
	(*GiveawayCreated)(nil),               // 45: pb.GiveawayCreated
	(*Giveaway)(nil),                      // 46: pb.Giveaway
	(*GiveawayWinners)(nil),               // 47: pb.GiveawayWinners
	(*GiveawayCompleted)(nil),             // 48: pb.GiveawayCompleted
	(*VideoChatScheduled)(nil),            // 49: pb.VideoChatScheduled
	(*VideoChatStarted)(nil),              // 50: pb.VideoChatStarted
	(*VideoChatEnded)(nil),                // 51: pb.VideoChatEnded
	(*VideoChatParticipantsInvited)(nil),  // 52: pb.VideoChatParticipantsInvited
	(*WebAppData)(nil),                    // 53: pb.WebAppData
	(*InlineKeyboardMarkup)(nil),          // 54: pb.InlineKeyboardMarkup
}
var file_message_proto_depIdxs = []int32{
	3,  // 0: pb.SendMessage.entities:type_name -> pb.MessageEntity
	4,  // 1: pb.SendMessage.link_preview_options:type_name -> pb.LinkPreviewOptions
	5,  // 2: pb.SendMessage.reply_parameters:type_name -> pb.ReplyParameters
	6,  // 3: pb.SendMessage.reply_markup:type_name -> pb.ReplyMarkup
	7,  // 4: pb.Message.from:type_name -> pb.User
	8,  // 5: pb.Message.sender_chat:type_name -> pb.Chat
	7,  // 6: pb.Message.sender_business_bot:type_name -> pb.User
	8,  // 7: pb.Message.chat:type_name -> pb.Chat
	9,  // 8: pb.Message.forward_origin:type_name -> pb.MessageOrigin
	2,  // 9: pb.Message.reply_to_message:type_name -> pb.Message
	10, // 10: pb.Message.external_reply:type_name -> pb.ExternalReplyInfo
	11, // 11: pb.Message.quote:type_name -> pb.TextQuote
	12, // 12: pb.Message.reply_to_story:type_name -> pb.Story
	7,  // 13: pb.Message.via_bot:type_name -> pb.User
	3,  // 14: pb.Message.entities:type_name -> pb.MessageEntity
	4,  // 15: pb.Message.link_preview_options:type_name -> pb.LinkPreviewOptions
	13, // 16: pb.Message.animation:type_name -> pb.Animation
	14, // 17: pb.Message.audio:type_name -> pb.Audio
	15, // 18: pb.Message.document:type_name -> pb.Document
	16, // 19: pb.Message.paid_media:type_name -> pb.PaidMediaInfo
	17, // 20: pb.Message.photo:type_name -> pb.PhotoSize
	18, // 21: pb.Message.sticker:type_name -> pb.Sticker
	12, // 22: pb.Message.story:type_name -> pb.Story
	19, // 23: pb.Message.video:type_name -> pb.Video
	20, // 24: pb.Message.video_note:type_name -> pb.VideoNote
	21, // 25: pb.Message.voice:type_name -> pb.Voice
	3,  // 26: pb.Message.caption_entities:type_name -> pb.MessageEntity
	22, // 27: pb.Message.contact:type_name -> pb.Contact
	23, // 28: pb.Message.dice:type_name -> pb.Dice
	24, // 29: pb.Message.game:type_name -> pb.Game
	25, // 30: pb.Message.poll:type_name -> pb.Poll
	26, // 31: pb.Message.venue:type_name -> pb.Venue
	27, // 32: pb.Message.location:type_name -> pb.Location
	7,  // 33: pb.Message.new_chat_members:type_name -> pb.User
	7,  // 34: pb.Message.left_chat_member:type_name -> pb.User
	17, // 35: pb.Message.new_chat_photo:type_name -> pb.PhotoSize
	28, // 36: pb.Message.message_auto_delete_timer_changed:type_name -> pb.MessageAutoDeleteTimerChanged
	2,  // 37: pb.Message.pinned_message:type_name -> pb.Message
	29, // 38: pb.Message.invoice:type_name -> pb.Invoice
	30, // 39: pb.Message.successful_payment:type_name -> pb.SuccessfulPayment
	31, // 40: pb.Message.refunded_payment:type_name -> pb.RefundedPayment
	32, // 41: pb.Message.users_shared:type_name -> pb.UsersShared
	33, // 42: pb.Message.chat_shared:type_name -> pb.ChatShared
	34, // 43: pb.Message.write_access_allowed:type_name -> pb.WriteAccessAllowed
	35, // 44: pb.Message.passport_data:type_name -> pb.PassportData
	36, // 45: pb.Message.proximity_alert_triggered:type_name -> pb.ProximityAlertTriggered
	37, // 46: pb.Message.boost_added:type_name -> pb.ChatBoostAdded
	38, // 47: pb.Message.chat_background_set:type_name -> pb.ChatBackground
	39, // 48: pb.Message.forum_topic_created:type_name -> pb.ForumTopicCreated
	40, // 49: pb.Message.forum_topic_edited:type_name -> pb.ForumTopicEdited
	41, // 50: pb.Message.forum_topic_closed:type_name -> pb.ForumTopicClosed
	42, // 51: pb.Message.forum_topic_reopened:type_name -> pb.ForumTopicReopened
	43, // 52: pb.Message.general_forum_topic_hidden:type_name -> pb.GeneralForumTopicHidden
	44, // 53: pb.Message.general_forum_topic_unhidden:type_name -> pb.GeneralForumTopicUnhidden
	45, // 54: pb.Message.giveaway_created:type_name -> pb.GiveawayCreated
	46, // 55: pb.Message.giveaway:type_name -> pb.Giveaway
	47, // 56: pb.Message.giveaway_winners:type_name -> pb.GiveawayWinners
	48, // 57: pb.Message.giveaway_completed:type_name -> pb.GiveawayCompleted
	49, // 58: pb.Message.video_chat_scheduled:type_name -> pb.VideoChatScheduled
	50, // 59: pb.Message.video_chat_started:type_name -> pb.VideoChatStarted
	51, // 60: pb.Message.video_chat_ended:type_name -> pb.VideoChatEnded
	52, // 61: pb.Message.video_chat_participants_invited:type_name -> pb.VideoChatParticipantsInvited
	53, // 62: pb.Message.web_app_data:type_name -> pb.WebAppData
	54, // 63: pb.Message.reply_markup:type_name -> pb.InlineKeyboardMarkup
	64, // [64:64] is the sub-list for method output_type
	64, // [64:64] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	file_misc_proto_init()
	file_user_proto_init()
	file_chat_proto_init()
	file_document_proto_init()
	file_reply_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SendChatAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
