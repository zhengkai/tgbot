syntax = "proto3";
option go_package = "/pb";
package pb;

import "message.proto";
import "misc.proto";

message Update {
    // The update's unique identifier. Update identifiers start from a certain
    // positive number and increase sequentially. This identifier becomes
    // especially handy if you're using webhooks, since it allows you to ignore
    // repeated updates or to restore the correct update sequence, should they
    // get out of order. If there are no new updates for at least a week, then
    // the identifier of the next update will be chosen randomly instead of sequentially.
    uint64 update_id = 1;

    // Optional. New incoming message of any kind - text, photo, sticker, etc.
    Message message = 2;

    // Optional. New version of a message that is known to the bot and was edited.
    // This update may at times be triggered by changes to message fields that
    // are either unavailable or not actively used by your bot.
    Message edited_message = 3;

    // Optional. New incoming channel post of any kind - text, photo, sticker, etc.
    Message channel_post = 4;

    // Optional. New version of a channel post that is known to the bot and was edited.
    // This update may at times be triggered by changes to message fields that
    // are either unavailable or not actively used by your bot.
    Message edited_channel_post = 5;

    // Optional. The bot was connected to or disconnected from a business account,
    // or a user edited an existing connection with the bot.
    BusinessConnection business_connection = 6;

    // Optional. New message from a connected business account.
    Message business_message = 7;

    // Optional. New version of a message from a connected business account.
    Message edited_business_message = 8;

    // Optional. Messages were deleted from a connected business account.
    BusinessMessagesDeleted deleted_business_messages = 9;

    // Optional. A reaction to a message was changed by a user.
    // The bot must be an administrator in the chat and must explicitly specify
    // "message_reaction" in the list of allowed_updates to receive these updates.
    // The update isn't received for reactions set by bots.
    MessageReactionUpdated message_reaction = 10;

    // Optional. Reactions to a message with anonymous reactions were changed.
    // The bot must be an administrator in the chat and must explicitly specify
    // "message_reaction_count" in the list of allowed_updates to receive these updates.
    // The updates are grouped and can be sent with delay up to a few minutes.
    MessageReactionCountUpdated message_reaction_count = 11;

    // Optional. New incoming inline query.
    InlineQuery inline_query = 12;

    // Optional. The result of an inline query that was chosen by a user and sent to their chat partner.
    // Please see our documentation on the feedback collecting for details on how to enable these updates for your bot.
    ChosenInlineResult chosen_inline_result = 13;

    // Optional. New incoming callback query.
    CallbackQuery callback_query = 14;

    // Optional. New incoming shipping query. Only for invoices with flexible price.
    ShippingQuery shipping_query = 15;

    // Optional. New incoming pre-checkout query. Contains full information about checkout.
    PreCheckoutQuery pre_checkout_query = 16;

    // Optional. New poll state. Bots receive only updates about manually stopped polls
    // and polls, which are sent by the bot.
    Poll poll = 17;

    // Optional. A user changed their answer in a non-anonymous poll.
    // Bots receive new votes only in polls that were sent by the bot itself.
    PollAnswer poll_answer = 18;

    // Optional. The bot's chat member status was updated in a chat.
    // For private chats, this update is received only when the bot is blocked or unblocked by the user.
    ChatMemberUpdated my_chat_member = 19;

    // Optional. A chat member's status was updated in a chat.
    // The bot must be an administrator in the chat and must explicitly specify
    // "chat_member" in the list of allowed_updates to receive these updates.
    ChatMemberUpdated chat_member = 20;

    // Optional. A request to join the chat has been sent.
    // The bot must have the can_invite_users administrator right in the chat to receive these updates.
    ChatJoinRequest chat_join_request = 21;

    // Optional. A chat boost was added or changed.
    // The bot must be an administrator in the chat to receive these updates.
    ChatBoostUpdated chat_boost = 22;

    // Optional. A boost was removed from a chat.
    // The bot must be an administrator in the chat to receive these updates.
    ChatBoostRemoved removed_chat_boost = 23;
}
