syntax = "proto3";
option go_package = "/pb";
package pb;

import "misc.proto";
import "user.proto";

// Message representing a request to send a message.
message SendMessage {
  // Unique identifier of the business connection on behalf of which the message will be sent
  string business_connection_id = 1;

  // Unique identifier for the target chat or username of the target channel (in the format @channelusername)
  string chat_id = 2;

  // Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
  int32 message_thread_id = 3;

  // Text of the message to be sent, 1-4096 characters after entities parsing
  string text = 4;

  // Mode for parsing entities in the message text. See formatting options for more details
  string parse_mode = 5;

  // A list of special entities that appear in message text, which can be specified instead of parse_mode
  repeated MessageEntity entities = 6;

  // Link preview generation options for the message
  LinkPreviewOptions link_preview_options = 7;

  // Sends the message silently. Users will receive a notification with no sound
  bool disable_notification = 8;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 9;

  // Unique identifier of the message effect to be added to the message; for private chats only
  string message_effect_id = 10;

  // Description of the message to reply to
  ReplyParameters reply_parameters = 11;

  // Additional interface options. A serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user
  ReplyMarkup reply_markup = 12;
}

message SendChatAction {
	string business_connection_id = 1;
	string chat_id = 2;
	int64 message_thread_id = 3;
	string action = 4;
}

// Define messages for InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, and ForceReply as required.
message Message {
    int32 message_id = 1; // Unique message identifier inside this chat

    int32 message_thread_id = 2; // Optional. Unique identifier of a message thread to which the message belongs; for supergroups only

    User from = 3; // Optional. Sender of the message; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats

    Chat sender_chat = 4; // Optional. Sender of the message when sent on behalf of a chat. For example, the supergroup itself for messages sent by its anonymous administrators or a linked channel for messages automatically forwarded to the channel's discussion group. For backward compatibility, if the message was sent on behalf of a chat, the field from contains a fake sender user in non-channel chats.

    int32 sender_boost_count = 5; // Optional. If the sender of the message boosted the chat, the number of boosts added by the user

    User sender_business_bot = 6; // Optional. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account.

    int32 date = 7; // Date the message was sent in Unix time. It is always a positive number, representing a valid date.

    string business_connection_id = 8; // Optional. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier.

    Chat chat = 9; // Chat the message belongs to

    MessageOrigin forward_origin = 10; // Optional. Information about the original message for forwarded messages

    bool is_topic_message = 11; // Optional. True, if the message is sent to a forum topic

    bool is_automatic_forward = 12; // Optional. True, if the message is a channel post that was automatically forwarded to the connected discussion group

    Message reply_to_message = 13; // Optional. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.

    ExternalReplyInfo external_reply = 14; // Optional. Information about the message that is being replied to, which may come from another chat or forum topic

    TextQuote quote = 15; // Optional. For replies that quote part of the original message, the quoted part of the message

    Story reply_to_story = 16; // Optional. For replies to a story, the original story

    User via_bot = 17; // Optional. Bot through which the message was sent

    int32 edit_date = 18; // Optional. Date the message was last edited in Unix time

    bool has_protected_content = 19; // Optional. True, if the message can't be forwarded

    bool is_from_offline = 20; // Optional. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message

    string media_group_id = 21; // Optional. The unique identifier of a media message group this message belongs to

    string author_signature = 22; // Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator

    string text = 23; // Optional. For text messages, the actual UTF-8 text of the message

    repeated MessageEntity entities = 24; // Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text

    LinkPreviewOptions link_preview_options = 25; // Optional. Options used for link preview generation for the message, if it is a text message and link preview options were changed

    string effect_id = 26; // Optional. Unique identifier of the message effect added to the message

    Animation animation = 27; // Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set

    Audio audio = 28; // Optional. Message is an audio file, information about the file

    Document document = 29; // Optional. Message is a general file, information about the file

    PaidMediaInfo paid_media = 30; // Optional. Message contains paid media; information about the paid media

    repeated PhotoSize photo = 31; // Optional. Message is a photo, available sizes of the photo

    Sticker sticker = 32; // Optional. Message is a sticker, information about the sticker

    Story story = 33; // Optional. Message is a forwarded story

    Video video = 34; // Optional. Message is a video, information about the video

    VideoNote video_note = 35; // Optional. Message is a video note, information about the video message

    Voice voice = 36; // Optional. Message is a voice message, information about the file

    string caption = 37; // Optional. Caption for the animation, audio, document, paid media, photo, video or voice

    repeated MessageEntity caption_entities = 38; // Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption

    bool show_caption_above_media = 39; // Optional. True, if the caption must be shown above the message media

    bool has_media_spoiler = 40; // Optional. True, if the message media is covered by a spoiler animation

    Contact contact = 41; // Optional. Message is a shared contact, information about the contact

    Dice dice = 42; // Optional. Message is a dice with random value

    Game game = 43; // Optional. Message is a game, information about the game. More about games Â»

    Poll poll = 44; // Optional. Message is a native poll, information about the poll

    Venue venue = 45; // Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set

    Location location = 46; // Optional. Message is a shared location, information about the location

    repeated User new_chat_members = 47; // Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)

    User left_chat_member = 48; // Optional. A member was removed from the group, information about them (this member may be the bot itself)

    string new_chat_title = 49; // Optional. A chat title was changed to this value

    repeated PhotoSize new_chat_photo = 50; // Optional. A chat photo was change to this value

    bool delete_chat_photo = 51; // Optional. Service message: the chat photo was deleted

    bool group_chat_created = 52; // Optional. Service message: the group has been created

    bool supergroup_chat_created = 53; // Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.

    bool channel_chat_created = 54; // Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.

    MessageAutoDeleteTimerChanged message_auto_delete_timer_changed = 55; // Optional. Service message: auto-delete timer settings changed in the chat

    int64 migrate_to_chat_id = 56; // Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.

    int64 migrate_from_chat_id = 57; // Optional. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.

    MaybeInaccessibleMessage pinned_message = 58; // Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.

    Invoice invoice = 59; // Optional. Message is an invoice for a payment, information about the invoice. More about payments Â»

    SuccessfulPayment successful_payment = 60; // Optional. Message is a service message about a successful payment, information about the payment. More about payments Â»

    RefundedPayment refunded_payment = 61; // Optional. Message is a service message about a refunded payment, information about the payment. More about payments Â»

    UsersShared users_shared = 62; // Optional. Service message: users were shared with the bot

    ChatShared chat_shared = 63; // Optional. Service message: a chat was shared with the bot

    string connected_website = 64; // Optional. The domain name of the website on which the user has logged in. More about Telegram Login Â»

    WriteAccessAllowed write_access_allowed = 65; // Optional. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess

    PassportData passport_data = 66; // Optional. Telegram Passport data

    ProximityAlertTriggered proximity_alert_triggered = 67; // Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location.

    ChatBoostAdded boost_added = 68; // Optional. Service message: user boosted the chat

    ChatBackground chat_background_set = 69; // Optional. Service message: chat background set

    ForumTopicCreated forum_topic_created = 70; // Optional. Service message: forum topic created

    ForumTopicEdited forum_topic_edited = 71; // Optional. Service message: forum topic edited

    ForumTopicClosed forum_topic_closed = 72; // Optional. Service message: forum topic closed

    ForumTopicReopened forum_topic_reopened = 73; // Optional. Service message: forum topic reopened

    GeneralForumTopicHidden general_forum_topic_hidden = 74; // Optional. Service message: the 'General' forum topic hidden

    GeneralForumTopicUnhidden general_forum_topic_unhidden = 75; // Optional. Service message: the 'General' forum topic unhidden

    GiveawayCreated giveaway_created = 76; // Optional. Service message: a scheduled giveaway was created

    Giveaway giveaway = 77; // Optional. The message is a scheduled giveaway message

    GiveawayWinners giveaway_winners = 78; // Optional. A giveaway with public winners was completed

    GiveawayCompleted giveaway_completed = 79; // Optional. Service message: a giveaway without public winners was completed

    VideoChatScheduled video_chat_scheduled = 80; // Optional. Service message: video chat scheduled

    VideoChatStarted video_chat_started = 81; // Optional. Service message: video chat started

    VideoChatEnded video_chat_ended = 82; // Optional. Service message: video chat ended

    VideoChatParticipantsInvited video_chat_participants_invited = 83; // Optional. Service message: new participants invited to a video chat

    WebAppData web_app_data = 84; // Optional. Service message: data sent by a Web App

    InlineKeyboardMarkup reply_markup = 85; // Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.
}
